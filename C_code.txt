#include<stdio.h>

short lab1_L_version(short R0, short R1)
{
	short R7 = 0;
	do
	{
		R7 = R7 + R0;
		R1--;
	} while (R1 != 0);
	return R7;
}


short lab1_P_version(short R0, short R1)
{
	short R7 = 0;
	short R2 = 0, R3 = 0;
	R2 = R2 + 1;
	do
	{
		R3 = R1 & R2;
		if (R3 == 0)  goto skip;
		R7 = R7 + R0;
	skip:
		R2 = R2 + R2;
		R0 = R0 + R0;
	} while (R0 != 0);
	return R7;
}


short lab2_fibonacci(short R0)
{
	short R1 = 0, R2 = 0, R3 = 0, R4 = 0, R6 = 0, R7 = 0;

	R7 = R7 + 1;
	R6 = R0;
	if (R6 == 0)    goto FINISH;
	R6 = R6 - 1;
	if (R6 == 0)    goto FINISH;

	R1 = R1 + 2;
	R3 = R3 + 1;
	R4 = R4 + 1;
	R7 = R7 + 1;

	do
	{
		R6 = ~R1;
		R6 = R6 + 1;
		R6 = R6 + R0;
		if (R6 == 0)    goto FINISH;

		R2 = R3 + R3;
		R3 = R4;
		R4 = R7;
		R7 = R4 + R2;
		R6 = 1023;
		R7 = R7 & R6;
		R1 = R1 + 1;
	} while (1);

FINISH:
	return R7;
}

short lab2_fibonacci_HighLevel(short R0)
{
	short R1 = 0, R2 = 0, R3 = 0, R4 = 0, R6 = R0, R7 = 1;

	if (R6 == 0)    return 1;
	if (R6 == 1)    return 1;

	R1 = R1 + 2;
	R3 = R3 + 1;
	R4 = R4 + 1;
	R7 = R7 + 1;

	while(1)
	{
		if (R0 == R1)    return R7;

		R2 = R3 + R3;
		R3 = R4;
		R4 = R7;
		R7 = (R4 + R2) % 1024;
		R1++;
	}
}


short lab3_fibonacci(short R0)
{
	short R1 = 0, R2 = 0, R3 = 0, R5 = 0, R7 = 0;

	R1 = R1 + 2;
	R2 = R2 + 1;
	R3 = R3 + 2;
	R5 = 1023;
	R7 = R7 + 1;
	R0 = R0 - 1;
	if (R0 == 0)    goto FINISH;
	R7 = R7 + 1;
	R0 = R0 - 1;
	if (R0 == 0)    goto FINISH;
	do
	{
		R7 = R1 + R3;
		R7 = R7 & R5;
		R0 = R0 - 1;
		if (R0 == 0)    goto FINISH;
		R1 = R2 + R2;
		R2 = R3;
		R3 = R7;
	} while (1);

FINISH:
	return R7;
}

short lab3_fibonacci_HighLevel(short R0)
{
	short R1 = 2, R2 = 1, R3 = 2, R7 = 1;

	R0--;
	if (R0 == 0)    return 1;
	R7 = R7 + 1;
	R0--;
	if (R0 == 0)    return 2;
	while(1)
	{
		R7 = (R1 + R3) % 1024;
		R0 = R0 - 1;
		if (R0 == 0)    return R7;
		R1 = R2 + R2;
		R2 = R3;
		R3 = R7;
	}
}


void lab4_task1_rec(short memory)
{
	void lab4_task1_rec_subroutine(short &R0, short &R1, short &R2, short &memory);
	short R0 = 0, R1 = 0, R2 = 0, R3 = 0, R4 = 0, R5 = 0, R6 = 0, R7 = 0;
	R2 = 0x3001 + 0xE;
	R0 = 0;
	lab4_task1_rec_subroutine(R0, R1, R2, memory);
	R7 = 0x3003;
	printf("R0=%d\nR1=%d\nR2=%d\nR3=%d\nR4=%d\nR5=%d\nR6=%d\nR7=%d\n", R0, R1, R2, R3, R4, R5, R6, R7);
}

void lab4_task1_rec_subroutine(short &R0, short &R1, short &R2, short &memory)
{
	R2 = R2 + 1;
	R0 = R0 + 1;
	R1 = memory;
	R1 = R1 - 1;
	memory = R1;
	if (memory == 0)    goto OUT;
	lab4_task1_rec_subroutine(R0, R1, R2, memory);
OUT:
	R2 = R2 - 1;
}

void lab4_task1_rec_HighLevel(short memory)
{
	void lab4_task1_rec_subroutine(short &R0, short &R1, short &R2, short &memory);
	short R0 = 0, R1 = 0, R2 = 0, R3 = 0, R4 = 0, R5 = 0, R6 = 0, R7 = 0;
	R2 = 0x3001 + 0xE;
	R0 = 0;
	lab4_task1_rec_subroutine(R0, R1, R2, memory);
	R7 = 0x3003;
	printf("R0=%d\nR1=%d\nR2=%d\nR3=%d\nR4=%d\nR5=%d\nR6=%d\nR7=%d\n", R0, R1, R2, R3, R4, R5, R6, R7);
}

void lab4_task1_rec_HighLevel_subroutine(short &R0, short &R1, short &R2, short &memory)
{
	R2 = R2 + 1;
	R0 = R0 + 1;
	R1 = memory - 1;
	memory = R1;
	if (memory != 0)    lab4_task1_rec_subroutine(R0, R1, R2, memory);
	R2 = R2 - 1;
}


short lab4_task2_mod(short R1)
{
	short lab4_task2_mod_subroutine(short R1);
	short R0 = 0, R2 = 0, R4 = 0;
	do
	{
		R4 = lab4_task2_mod_subroutine(R1);
		R2 = R1 & 7;
		R1 = R2 + R4;
		R0 = R1 - 7;
	} while (R0 > 0);
	R0 = R1 - 7;
	if (R0 < 0)    goto FINISH;
	R1 = R1 - 7;
FINISH:
	return R1;
}

short lab4_task2_mod_subroutine(short R1)
{
	short R2 = 0, R3 = 0, R4 = 0, R5;
	R2 = R2 + 1;
	R3 = R3 + 8;
	do
	{
		R5 = R3 & R1;
		if (R5 == 0)    goto skip;
		R4 = R2 + R4;
	skip:
		R2 = R2 + R2;
		R3 = R3 + R3;
	} while (R3 != 0);
	return R4;
}

short lab4_task2_mod_HighLevel(short R1)
{
	short lab4_task2_mod_subroutine(short R1);
	short R2 = 0, R4 = 0;
	do
	{
		R4 = lab4_task2_mod_subroutine(R1);
		R2 = R1 % 8;
		R1 = R2 + R4;
	} while (R1 > 7);
	if (R1 < 7)    return R1;
	return R1 - 7;
}

short lab4_task2_mod_HignLevel_subroutine(short R1)
{
	short R2 = 1, R3 = 8, R4 = 0, R5;
	do
	{
		R5 = R3 & R1;
		if (R5 != 0)    R4 = R2 + R4;
		R2 = R2 + R2;
		R3 = R3 + R3;
	} while (R3 != 0);
	return R4;
}


short lab5_prime(short R0)
{
	short JUDGE(short R0);
	short R1 = 0;
	R1 = R1 + 1;
	R1 = JUDGE(R0);
	return R1;
}

short JUDGE(short R0)
{
	short MUL(short R2);
	short MOD(short R0, short R2);
	short R1 = 1, R2 = 0, R3 = 0, R4 = 0;
	R2 = R2 + 2;
	do
	{
		R3 = MUL(R2);
		R4 = ~R0;
		R4 = R4 + 1;
		R3 = R3 + R4;
		if (R3 > 0)    goto YES;
		R3 = MOD(R0, R2);
		if (R3 == 0)    goto NO;
		R2 = R2 + 1;
	} while (1);
NO:
	R1 = R1 & 0;
YES:
	return R1;
}

short MUL(short R2)
{
	short R3 = 0;
	short R4 = R2;
	do
	{
		R3 = R3 + R2;
		R4 = R4 - 1;
	} while (R4 != 0);
	return R3;
}

short MOD(short R0, short R2)
{
	short R3, R4;
	R4 = ~R2;
	R4 = R4 + 1;
	do
	{
		R0 = R0 + R4;
	} while (R0 >= 0);
	R3 = R0 + R2;
	return R3;
}

short lab5_prime_HighLevel(short R0)
{
	short JUDGE(short R0);
	return JUDGE(R0);
}

short JUDGE_HighLevel(short R0)
{
	short R1 = 1, R2 = 0, R3 = 0, R4 = 0;
	R2 = R2 + 2;
	do
	{
		R3 = R2 * R2;
		R3 = R3 - R0;
		if (R3 > 0)    return 1;
		R3 = R0 % R2;
		if (R3 == 0)    return 0;
		R2 = R2 + 1;
	} while (1);
}

int main()
{
	short R0 = 0, R1 = 0, R2 = 0, R3 = 0, R4 = 0, R5 = 0, R6 = 0, R7 = 0;
	int choose;
	printf("请输入想要执行的函数：\n");
	printf("1、lab1_L_version和lab1_P_version\n");
	printf("2、lab2_fibonacci\n");
	printf("3、lab3_fibonacci\n");
	printf("4、lab4_task1_rec\n");
	printf("5、lab4_task2_mod\n");
	printf("6、lab5_prime\n");
	scanf("%d", &choose);
	switch (choose)
	{
	case 1:
		R0 = -114;
		R1 = -233;
		R7 = lab1_L_version(R0, R1);
		printf("R0=%d\n", R0);
		printf("R1=%d\n", R1);
		printf("lab1_L_version结果：%d\n", R7);
		R7 = lab1_P_version(R0, R1);
		printf("lab1_P_version结果：%d\n", R7);
		break;
	case 2:
		R0 = 20;
		R7 = lab2_fibonacci(R0);
		//R7 = lab2_fibonacci_HighLevel(R0);
		printf("R0=%d\n", R0);
		printf("lab2_fibonacci结果：%d\n", R7);
		break;
	case 3:
		R0 = 20;
		R7 = lab3_fibonacci(R0);
		//R7 = lab3_fibonacci_HighLevel(R0);
		printf("R0=%d\n", R0);
		printf("lab3_fibonacci结果：%d\n", R7);
		break;
	case 4:
		short memory;
		memory = 5;
		printf("memory=%d\n", memory);
		//lab4_task1_rec(memory);
		lab4_task1_rec_HighLevel(memory);
		break;
	case 5:
		R1 = 288;
		printf("函数运行前R1=%d\n", R1);
		R1 = lab4_task2_mod(R1);
		//R1 = lab4_task2_mod_HighLevel(R1);
		printf("lab4_task2_mod结果：%d\n", R1);
		break;
	case 6:
		R0 = 2347;
		short R1;
		R1 = lab5_prime(R0);
		//R1 = lab5_prime_HighLevel(R0);
		printf("R0=%d\n", R0);
		printf("lab5_prime结果：%d\n", R1);
		break;
	default:
		printf("输入错误\n");
	}

	return 0;
}